syntax = "proto3";
package dbstream;

option go_package = "./proto";

message DatabaseEvent {
  oneof event_type {
    StreamStatus status = 1;
    SnapshotBegin snapshot_begin = 2;
    SnapshotPageBegin page_begin = 3;
    SnapshotRow snapshot_row = 4;
    SnapshotPageEnd page_end = 5;
    SnapshotEnd snapshot_end = 6;
    SnapshotFailure snapshot_failure = 7;
    TransactionBegin begin = 8;
    ChangeEvent change = 9;
    TransactionCommit commit = 10;
  }
}

message StreamStatus {
  string state = 1;
  string message = 2;
  int64 timestamp = 3;
}

message SnapshotBegin {
  repeated string tables = 1;
  int64 timestamp = 2;
  int32 page_size = 3;
}

message SnapshotPageBegin {
  int32 page_number = 1;
  int32 row_count = 2;
}

message SnapshotRow {
  string table_name = 1;
  map<string, string> values = 2;
}

message SnapshotPageEnd {
  int32 page_number = 1;
}

message SnapshotEnd {
  int64 timestamp = 1;
  string lsn = 2;
}

message SnapshotFailure {
  string error_message = 1;
  int64 timestamp = 2;
}

message TransactionBegin {
  uint32 transaction_id = 1;
  int64 timestamp = 2;
  string lsn = 3;
}

message ChangeEvent {
  uint32 transaction_id = 1;
  string table_name = 2;
  string operation = 3;
  int64 timestamp = 4;
  map<string, string> old_values = 5;
  map<string, string> new_values = 6;
}

message TransactionCommit {
  uint32 transaction_id = 1;
  int64 commit_timestamp = 2;
  string lsn = 3;
}

message StreamRequest {
  repeated string tables = 1;
  bool include_snapshot = 2;
  uint32 last_known_transaction_id = 3;
  int32 page_size = 4;
}

message StopRequest {}

message StopResponse {
  string message = 1;
}

service DatabaseChangeStream {
  rpc StartStream(StreamRequest) returns (stream DatabaseEvent) {}
  rpc StopStream(StopRequest) returns (StopResponse) {}
  rpc SyncStream(StreamRequest) returns (stream DatabaseEvent) {}
}